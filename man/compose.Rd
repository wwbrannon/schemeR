% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functional.R
\name{compose}
\alias{compose}
\title{Compose functions}
\usage{
compose(..., where = parent.frame())
}
\arguments{
\item{...}{Objects to compose. See 'Details'.}

\item{where}{An environment in which to resolve any character or
symbol arguments.}
}
\value{
A function representing the composition of the arguments.
}
\description{
Function composition is a common operation in functional programming.
Given some number of functions, this function returns another function
which represents their composition: given three functions f, g, h,
compose(f, g, h) returns a function equivalent for all x to f(g(h(x))).
}
\details{
The functions passed must all take a single argument.

If some of the \code{...} arguments are not function objects, they are
resolved to function objects in the following way: character arguments
are looked up in the provided \code{where} environment; symbol arguments
are coerced to character and then looked up in the \code{where} environment;
other types of arguments, or symbol/character arguments which fail to
resolve to a function object, raise an error.
}
\examples{
f <- function(x) x+1
g <- function(x) 3*x
h <- function(x) x^2

compose(f, g, h)(2) #=> 13 == 3(2)^2 + 1
}

