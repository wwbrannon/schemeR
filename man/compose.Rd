% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functional.R
\name{compose}
\alias{compose}
\alias{composeM}
\title{Compose functions}
\usage{
compose(..., where = parent.frame())

composeM(..., where = parent.frame())
}
\arguments{
\item{...}{Objects to compose. See 'Details'.}

\item{where}{An environment in which to resolve any character or
symbol arguments.}
}
\value{
A function representing the composition of the arguments.
}
\description{
Function composition is a common operation in functional programming.
Given some number of input functions, these functions return new functions
which represents the composition of the inputs. That is, for three functions
f, g, h, \code{compose(f, g, h)} returns a function equivalent for all x to
f(g(h(x))). \code{composeM} handles the case of functions of multiple
arguments.
}
\details{
For \code{compose}, the functions passed must all take a single argument.

For \code{composeM}, the functions passed must take n >= 1 arguments, and
return a list or vector. \code{composeM}'s returned function proceeds right
to left through the functions it composes, applying each to the sequence of
arguments returned by the previous function (via \code{\link{do.call}}). The
first function is called with the actual arguments passed.

If some of the \code{...} arguments are not function objects, they are
resolved to function objects in the following way: character arguments
are looked up in the provided \code{where} environment; symbol arguments
are coerced to character and then looked up in the \code{where} environment;
other types of arguments, or symbol/character arguments which fail to
resolve to a function object, raise an error.
}
\examples{
f <- function(x) x+1
g <- function(x) 3*x
h <- function(x) x^2

compose(f, g, h)(2) #=> 13 == 3(2)^2 + 1
}
\seealso{
\code{\link{curry}}, \code{\link{lazy.curry}} and \code{\link{uncurry}},
which are frequently useful in conjunction with \code{compose}.
}

