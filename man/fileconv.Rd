% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prefix.R
\name{fileconv}
\alias{fileconv}
\alias{infixFiles}
\alias{prefixFiles}
\title{Convert R code files from prefix to infix, or vice versa}
\usage{
prefixFiles(files, overwrite = FALSE)

infixFiles(files, overwrite = FALSE)
}
\arguments{
\item{files}{A character vector of file paths to convert.}

\item{overwrite}{Should the generated code overwrite the input file?}
}
\value{
Invisible NULL.
}
\description{
These functions convert files from prefix to infix, and vice versa.
They can be told to overwrite the passed files, or to generate new files.
In the latter case, when converting to infix, the input files are assumed
to have extension ".Rl", and the corresponding output files will have
extension ".R"; when converting to prefix, the input files are assumed
to have extension ".R", and the corresponding output files will have
extension ".Rl".
}
\section{See Also}{

\code{\link{infix}} and \code{\link{prefix}} for converting expressions
from R-style infix to Lisp-style prefix and vice versa; the \code{.}
function, which is the building block of prefix-formatted R code.
}
\examples{

\dontrun{
prefixFiles(c("ex1.R", "ex2.R", "ex3.R"), overwrite=FALSE)
prefixFiles(c("ex1.myext", "ex2.myext", "ex3.myext"), overwrite=TRUE)
}


\dontrun{
infixFiles(c("ex1.Rl", "ex2.Rl", "ex3.Rl"), overwrite=FALSE)
infixFiles(c("ex1.myext", "ex2.myext", "ex3.myext"), overwrite=TRUE)
}

}

