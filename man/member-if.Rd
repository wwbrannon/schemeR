% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functional.R
\name{member-if}
\alias{member-if}
\alias{member.if}
\alias{member.if.not}
\title{Searching for tails of sequences}
\usage{
member.if(f, x, k = identity)

member.if.not(f, x, k = identity)
}
\arguments{
\item{f}{The filter predicate to use on the sequence x.}

\item{x}{The sequence to search for a satisfying element.}

\item{k}{The "key" function to pre-apply to elements of x. Defaults to
the identity function.}
}
\value{
The tail of the sequence \code{map(k, x)} beginning with the first
element that satisfies the predicate f, or NULL if no element did.
}
\description{
\code{member.if} and \code{member.if.not} search "sequences" (by which we
mean lists, other vectors or pairlists) for the first element satisfying
some predicate function, and return the sub-sequence beginning with that
element.
}
\details{
The sequence searched is actually \code{\link{map}(k, x)} rather than x,
which makes it easier to avoid defining short anonymous functions.
}
\examples{
f <- 20:40

#The first element divisible by 3 and all afterward
member.if(is.zero, f, k=function(x) x \%\% 3) == 21:40

#Trimming by the presence of a sentinel value
member.if.not(function(x) x < 30, f) == 30:40

}
\seealso{
The functional-programming functions in base, especially \code{Filter},
under \code{\link[=Filter]{funprog}}.
}

