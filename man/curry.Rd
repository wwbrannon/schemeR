% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functional.R
\name{curry}
\alias{curry}
\alias{lazy.curry}
\alias{uncurry}
\title{Partial function application}
\usage{
curry(f, ...)

lazy.curry(f, ...)

uncurry(f)
}
\arguments{
\item{f}{The function to curry or uncurry.}

\item{...}{Arguments to be used in currying.}
}
\value{
For \code{curry} and \code{lazy.curry}, the curried function;
for \code{uncurry}, the uncurried function. Note that \code{uncurry}
will raise an error if its argument did not result from a call to
\code{curry} or \code{lazy.curry}.
}
\description{
\code{curry} and related functions modify other functions by pre-setting
their arguments.
}
\details{
For an introduction to the whole concept of function currying and why it's
useful, in more detail than we can give here, see the ever-helpful
\href{https://en.wikipedia.org/wiki/Currying}{Wikipedia}.

\code{curry} uses standard evaluation (i.e., does not implicitly quote its
arguments), while \code{lazy.curry} uses \code{substitute} to avoid
evaluating its arguments before using them in currying.

\code{uncurry} takes a curried function - one resulting from a call to
\code{curry} or \code{lazy.curry} - and undoes the currying, returning the
original function without pre-set arguments.

If currying is nested, one call to \code{uncurry} can be made for each call
to \code{curry} or \code{lazy.curry} - attempting to uncurry a function more
times than it's been curried will raise an error.
}
\section{Note}{

Currying is named after the mathematician
\href{http://en.wikipedia.org/wiki/Haskell_Curry}{Haskell Curry}.
}

