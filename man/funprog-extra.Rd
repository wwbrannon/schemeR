% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functional.R
\name{funprog-extra}
\alias{delete.matching}
\alias{funprog-extra}
\alias{keep.matching}
\alias{map}
\alias{reduce}
\title{Additional higher-order functions}
\usage{
delete.matching(f, x)

reduce(f, x, init, right = FALSE, accumulate = FALSE)

map(f, ...)

keep.matching(f, x)
}
\arguments{
\item{f}{A function of the appropriate arity, as in
\code{\link[=Filter]{funprog}}.}

\item{x}{A vector.}

\item{init}{As in \code{link{Reduce}}.}

\item{right}{As in \code{link{Reduce}}.}

\item{accumulate}{As in \code{link{Reduce}}.}

\item{...}{As in \code{link{Map}}.}
}
\value{
\code{delete.matching} returns the elements of x for which f is not
logically true.
}
\description{
These functions are aliases for or thin wrappers around the functions in
the base R \code{\link[=Filter]{funprog}} set. The aliases make the
functions available under the names that are usual in Lisp/Scheme.
}
\details{
The following functions are aliases for functions from base:
\itemize{
\item{\code{map} is base's \code{\link{Map}};}
\item{\code{reduce} is base's \code{\link{Reduce}};}
\item{\code{keep.matching} is base's \code{\link{Filter}};}
}

The \code{delete.matching} function does the opposite of
\code{keep.matching} and returns only elements of x for which f does not
return a logically true value.
}
\seealso{
The functional-programming functions in base, especially \code{Filter},
under \code{\link[=Filter]{funprog}}.
}

