% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functional.R
\name{lambda}
\alias{lambda}
\title{Construct an anonymous function in infix code}
\usage{
lambda(params, ...)
}
\arguments{
\item{params}{A parameter list, which when coerced to pairlist is acceptable
to the "function" constructor function.}

\item{...}{Body statements.}
}
\value{
The constructed function.
}
\description{
This function provides the Lisp/Scheme lambda form for defining anonymous
functions. Its behavior is very similar to R's "function" keyword, but it
interprets its arguments in a way that allows it to be used naturally in
prefix code. It is not intended to be called the usual way from infix R
code.
}
\details{
Because R is a Scheme dialect, this lambda is directly evaluable and
evaluates to a function object. Common Lisp's sharp-quote operator is not
necessary and not provided.
}
\examples{
schemeR::schemeR({
.(map, .(lambda, .(n), .(paste0, n, "\\n")),
       .(list, "a", "b"))
}, pkg=TRUE)

schemeR::schemeR({
.(letrec, .(.(i, 3),
            .(foo, .(lambda, .(n), .(`+`, n, 1)))),
     .(`==`, i, .(foo, 2)))
}, pkg=TRUE)

}

