% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/numeric.R
\name{numeric}
\alias{expt}
\alias{is.even}
\alias{is.negative}
\alias{is.number}
\alias{is.odd}
\alias{is.positive}
\alias{is.zero}
\alias{modulo}
\alias{numeric}
\alias{quotient}
\alias{remainder}
\title{Numeric functions}
\usage{
expt(e1, e2)

quotient(e1, e2)

remainder(e1, e2)

modulo(e1, e2)

is.number(x)

is.even(x)

is.odd(x)

is.zero(x)

is.positive(x)

is.negative(x)
}
\arguments{
\item{e1}{For expt, quotient, remainder and modulo, the left-hand argument
to the underlying infix operator.}

\item{e2}{For expt, quotient, remainder and modulo, the right-hand argument
to the underlying infix operator.}

\item{x}{An R object on which to check a predicate.}
}
\value{
For the is.* functions, TRUE or FALSE; for expt, quotient, remainder
and modulo, the result of the operation.
}
\description{
These functions provide Lisp/Scheme-friendly aliases for and thin wrappers
around some numeric infix operators from base R.
}
\details{
The expt, quotient, remainder and modulo functions are aliases for the
following base operators:
\itemize{
\item{\code{expt} is \code{^}}
\item{\code{quotient} is \code{\%/\%}}
\item{\code{remainder} is \code{\%\%}}
\item{\code{modulo} is also \code{\%\%}}
}

The is.number function is an alias for the is.numeric function from base;
the other is.* functions are simple predicates that do what their names
suggest.
}
\examples{
expt(4, 5) == 4^5 #=> 1024

quotient(10, 3) == 10 \%/\% 3 #=> 3

remainder(10, 3) == 10 \%\% 3 #=> 1

modulo(10, 3) == 10 \%\% 3 #=> 1

is.number(3) && !is.number("foo")

is.even(22) && !is.even(23)

is.odd(23) && !is.odd(22)

is.zero(0) && !is.zero(1)

is.positive(234) && !is.positive(-34)

is.negative(-34) && !is.negative(234)

}

